// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreAppDL;

namespace StoreAppDL.Migrations
{
    [DbContext(typeof(StoreAppDBContext))]
    [Migration("20210727180749_DatePropAddedToOrder")]
    partial class DatePropAddedToOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoreAppModel.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("StoreAppModel.LineItem", b =>
                {
                    b.Property<int>("LineItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LineItemQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("LineItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("LineItems");
                });

            modelBuilder.Entity("StoreAppModel.Manager", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreFrontID")
                        .HasColumnType("int");

                    b.HasKey("ManagerID");

                    b.HasIndex("StoreFrontID");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("StoreAppModel.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePlaced")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<int?>("StoreFrontID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StoreFrontID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreAppModel.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<int>("StoreFrontID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("StoreFrontID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreAppModel.StoreFront", b =>
                {
                    b.Property<int>("StoreFrontID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StoreFrontAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreFrontName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreFrontID");

                    b.ToTable("StoreFronts");
                });

            modelBuilder.Entity("StoreAppModel.LineItem", b =>
                {
                    b.HasOne("StoreAppModel.Order", "Order")
                        .WithMany("OrderLineItems")
                        .HasForeignKey("OrderID");

                    b.HasOne("StoreAppModel.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreAppModel.Manager", b =>
                {
                    b.HasOne("StoreAppModel.StoreFront", "StoreFront")
                        .WithMany()
                        .HasForeignKey("StoreFrontID");

                    b.Navigation("StoreFront");
                });

            modelBuilder.Entity("StoreAppModel.Order", b =>
                {
                    b.HasOne("StoreAppModel.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerID");

                    b.HasOne("StoreAppModel.StoreFront", "StoreFront")
                        .WithMany("StoreFrontOrders")
                        .HasForeignKey("StoreFrontID");

                    b.Navigation("Customer");

                    b.Navigation("StoreFront");
                });

            modelBuilder.Entity("StoreAppModel.Product", b =>
                {
                    b.HasOne("StoreAppModel.StoreFront", "StoreFront")
                        .WithMany()
                        .HasForeignKey("StoreFrontID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFront");
                });

            modelBuilder.Entity("StoreAppModel.Customer", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("StoreAppModel.Order", b =>
                {
                    b.Navigation("OrderLineItems");
                });

            modelBuilder.Entity("StoreAppModel.StoreFront", b =>
                {
                    b.Navigation("StoreFrontOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
